import google.generativeai as genai
import os
from dotenv import load_dotenv

load_dotenv()  # Carrega as vari√°veis do .env

api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    print("‚ùå Erro: GOOGLE_API_KEY n√£o encontrada no .env")
else:
    print("üîê GOOGLE_API_KEY carregada com sucesso.")

genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-pro")


def gerar_feedback(dados):
    print("üéØ Fun√ß√£o gerar_feedback() foi chamada!")
    
    prompt = f"""
Voc√™ √© um treinador de academia virtual. O usu√°rio executou flex√µes no modo "{dados['mode']}". 
Com base nos dados abaixo, forne√ßa um feedback t√©cnico:

- Classifica√ß√£o final: {dados['classificacao']}
- Repeti√ß√µes realizadas: {dados['reps']}
- √Çngulo m√©dio do cotovelo: {dados['mean']:.2f} graus
- Amplitude do movimento (varia√ß√£o do √¢ngulo): {dados['amplitude']:.2f} graus

**Objetivo:**
- Se a classifica√ß√£o for "Ruim", identifique os principais erros (pouca amplitude, √¢ngulo inadequado etc) e explique como corrigir.
- Se a classifica√ß√£o for "Bom", parabenize e destaque o que foi feito corretamente.
- Sempre d√™ 1 ou 2 dicas pr√°ticas para melhorar a execu√ß√£o.

Dado o modo {dados['mode']}, ajuste as dicas conforme o √¢ngulo (modo lateral) ou posi√ß√£o do tronco/quadril (modo frontal).
"""

    try:
        response = model.generate_content(prompt)
        print("‚úÖ Resposta recebida do Gemini.")
        return response.text.strip()
    except Exception as e:
        print(f"‚ùå Erro ao gerar feedback com Gemini: {e}")
        return "‚ö†Ô∏è Erro ao gerar feedback."

